{"version":3,"sources":["components/Modal.module.css","App.module.css","components/Button.module.css","components/Point.js","components/Button.js","components/Canvas.js","components/Modal.js","functions/math.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Point","top","left","final","center","onMouseDown","onMouseUp","draggable","style","position","marginLeft","marginTop","width","height","border","borderRadius","cursor","fontSize","whiteSpace","Button","onClick","message","className","css","button","Canvas","forwardRef","props","ref","document","body","clientWidth","clientHeight","Modal","open","closeModal","modalRoot","modalRootHidden","e","modalContent","modalContentHidden","stopPropagation","href","target","rel","src","alt","getParallelogramArea","vertices","length","firstPass","secondPass","i","aux","area","getCircleRadius","Math","sqrt","PI","App","useState","points","setPoints","finalPoint","setFinalPoint","centerPoint","setCenterPoint","dragging","index","dragStatus","setDragging","modalOpen","setModalOpen","parallelRef","createRef","circleRef","useEffect","getParallelogramFinalVertex","drawParallelogram","pCenter","centerX","centerY","forEach","vertex","getParallelogramCenter","drawCircle","canvas","current","ctx","getContext","clearRect","strokeStyle","beginPath","moveTo","lineTo","stroke","pArea","cRadius","arc","stopDrag","cArea","pow","toFixed","clientY","clientX","onMouseMove","newPoints","newCoords","splice","info","buttonWrapper","querySelectorAll","el","map","point","key","pointIndex","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77e11f5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalRoot\":\"Modal_modalRoot__3ZcaF\",\"modalRootHidden\":\"Modal_modalRootHidden__22GDP\",\"modalContent\":\"Modal_modalContent__1ATS_\",\"modalContentHidden\":\"Modal_modalContentHidden__35t2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"info\":\"App_info__3tKmE\",\"buttonWrapper\":\"App_buttonWrapper__2758t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Ce79\"};","import React from \"react\";\n\nconst Point = ({ top, left, final, center, onMouseDown, onMouseUp, draggable = false }) => (\n  <div\n    style={{\n      position: \"absolute\",\n      top,\n      left,\n      marginLeft: -7,\n      marginTop: -7,\n      // 9px + 2px from the border equals 11px as requested\n      width: 9,\n      height: 9,\n      border: `1px solid ${final ? \"blue\" : center ? \"green\" : \"red\"}`,\n      borderRadius: 100,\n      cursor: draggable ? \"grab\" : \"default\"\n    }}\n    onMouseDown={draggable ? onMouseDown : () => {}}\n    onMouseUp={onMouseUp}\n  >\n    <p style={{ fontSize: 8, whiteSpace: \"nowrap\" }}>{`x: ${left}, y: ${top}`}</p>\n  </div>\n);\n\nexport default Point;","import React from \"react\";\n\nimport css from \"./Button.module.css\";\n\nconst Button = ({ onClick, message, className = \"\" }) => (\n  <button onClick={onClick} className={`${css.button} ${className}`}>{message}</button>\n);\n\nexport default Button;","import React, { forwardRef } from \"react\";\n\nconst Canvas = forwardRef((props, ref) =>\n  <canvas ref={ref} width={document.body.clientWidth} height={document.body.clientHeight} />\n);\n\nexport default Canvas;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nimport css from \"./Modal.module.css\";\n\nconst Modal = ({ open, closeModal }) => {\n  const handleOutsideClick = (e) => closeModal(e);\n\n  const killEvent = (e) => e.stopPropagation();\n\n  return (\n    <div className={`${css.modalRoot} ${open ? \"\" : css.modalRootHidden}`} onClick={handleOutsideClick}>\n      <div className={`${css.modalContent} ${open ? \"\" : css.modalContentHidden}`} onClick={killEvent}>\n        <h1>About:</h1>\n        <p>This program creates a parallelogram based on user input, then displays information about the drawn polygon, while also drawing a circle based on its properties.</p>\n        <h2>How to use:</h2>\n        <ol>\n          <li>Click on 3 separate points on the screen</li>\n          <li>The parallelogram will then be drawn</li>\n          <li>You can drag any of the inputted points around to resize the polygon</li>\n          <li>To clear the drawings, press \"Reset\"</li>\n        </ol>\n        <hr />\n        <p>Created by Jacques Mouette, 2020</p>\n        <a href=\"http://www.github.com/desktp\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub\" />\n        </a>\n        <Button onClick={closeModal} message=\"Close\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Modal;\n","export const getParallelogramFinalVertex = (vertices = []) => {\n  if (vertices.length !== 3) return {};\n\n  /**\n    * considering we have a parallelogram with vertexes A, B, C\n    * we can get the last vertex's (D) coordinates with\n    *  Dx = Ax + Cx - Bx\n    *  Dy = Ay + Cy - By\n    *  https://www.geeksforgeeks.org/find-missing-point-parallelogram/\n    **/\n  return {\n    left: vertices[0].left + (vertices[2].left - vertices[1].left),\n    top: vertices[0].top + (vertices[2].top - vertices[1].top),\n  };\n}\n\nexport const getParallelogramArea = (vertices = []) => {\n  if (vertices.length !== 4) return 0;\n \n  // Shoelace formula\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  // A=0.5 * (x0y1 + x1y2 + x2y3 + x3y0 - x1y0 - x2y1 - x3y2 - x0y3)\n  let firstPass = 0;\n  let secondPass = 0;\n  for (let i = 0; i <= 3; i += 1) {\n    let aux = i === 3 ? 0 : i + 1;\n\n    firstPass += vertices[i].left * vertices[aux].top;\n    secondPass += vertices[aux].left * vertices[i].top;\n  }\n\n  let area = 0.5 * (firstPass - secondPass);\n  if (area < 0) area = area * -1;\n\n  return area;\n}\n\nexport const getParallelogramCenter = ([...vertices]) => {\n  let centerX = 0;\n  let centerY = 0;\n  vertices.forEach(vertex => {\n    centerX += vertex.left;\n    centerY += vertex.top;\n  });\n  centerX = centerX / 4;\n  centerY = centerY / 4;\n  return { top: centerY, left: centerX };\n}\n\nexport const getCircleRadius = (area) => Math.sqrt(area / Math.PI);\n","import React, { useState, useEffect, createRef } from 'react';\n\nimport Point from './components/Point';\nimport Button from './components/Button';\nimport Canvas from './components/Canvas';\nimport Modal from './components/Modal';\n\nimport {\n  getParallelogramFinalVertex,\n  getParallelogramArea,\n  getParallelogramCenter,\n  getCircleRadius\n} from './functions/math';\n\nimport css from './App.module.css';\n\nconst MAX_VERTICES = 3;\n\nconst App = () => {\n  const [points, setPoints] = useState([]);\n  const [finalPoint, setFinalPoint] = useState({});\n  const [centerPoint, setCenterPoint] = useState({});\n  const [dragStatus, setDragging] = useState({ dragging: false, index: 0 });\n  const [modalOpen, setModalOpen] = useState(false);\n\n  // Using refs so we can get the DOM node without\n  // resorting to querySelector or similar\n  const parallelRef = createRef();\n  const circleRef = createRef();\n\n  // if we have all 3 points, calculate final point\n  useEffect(() => {\n    if (points.length === MAX_VERTICES) {\n      const finalPoint = getParallelogramFinalVertex(points)\n      setFinalPoint(finalPoint);\n    }\n  }, [points]);\n\n  // We have all points, now to calculate the center\n  // and draw the parallelogram\n  useEffect(() => {\n    if (finalPoint.top) {\n      drawParallelogram();\n      const pCenter = getParallelogramCenter([...points, finalPoint]);\n      setCenterPoint(pCenter);\n    };\n  }, [finalPoint]);\n\n  // We have the center point, so we can draw the circle\n  useEffect(() => {\n    if (centerPoint.top) {\n      drawCircle();\n    }\n  }, [centerPoint]);\n\n  const drawParallelogram = () => {\n    const canvas = parallelRef.current;\n\n    const ctx = canvas.getContext(\"2d\");\n    // Clear previous line\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.strokeStyle = \"blue\";\n    ctx.beginPath();\n    // Redo to use a loop with all vertices in an array\n    const vertices = [...points, finalPoint];\n\n    vertices.forEach((vertex, index) => {\n      if (index === 0) ctx.moveTo(vertex.left, vertex.top);\n      // Draw a line from each vertex to the next\n      else ctx.lineTo(vertex.left, vertex.top);\n\n      // Then back to the first to close the polygon\n      if (index === vertices.length - 1) ctx.lineTo(vertices[0].left, vertices[0].top);\n    });\n\n    ctx.stroke();\n  }\n\n  const drawCircle = () => {\n    const canvas = circleRef.current;\n\n    const ctx = canvas.getContext(\"2d\");\n    // Clear previous line\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const pArea = getParallelogramArea([...points, finalPoint]);\n    const cRadius = getCircleRadius(pArea);\n\n    ctx.strokeStyle = \"#d6cc02\";\n    ctx.beginPath();\n    // center X, center Y, radius, arc start, arc end\n    // 2 * pi means 360 degrees\n    ctx.arc(centerPoint.left, centerPoint.top, cRadius, 0, 2 * Math.PI);\n    ctx.stroke();\n  }\n\n  const handleClick = (e) => {\n    if (points.length < MAX_VERTICES) {\n      const top = e.clientY;\n      const left = e.clientX;\n      setPoints([...points, { top, left }]);\n    }\n  }\n\n  const handleReset = (e) => {\n    e.stopPropagation();\n    setPoints([]);\n    setFinalPoint([]);\n    setCenterPoint({});\n\n    // Wipe all canvases\n    const elements = document.querySelectorAll(\"canvas\");\n    elements.forEach(el => {\n      const ctx = el.getContext(\"2d\");\n      ctx.clearRect(0, 0, el.width, el.height);\n    })\n  }\n\n  // We stopPropagation() of most click events\n  // to avoid creating a point on the board\n  const handleOpenModal = (e) => {\n    e.stopPropagation();\n    setModalOpen(true);\n  }\n\n  const handleCloseModal = (e) => {\n    e.stopPropagation();\n    setModalOpen(false);\n  }\n\n  // Sets a vertex as \"being dragged\"\n  const startDrag = (pointIndex) => (e) => {\n    e.stopPropagation();\n    setDragging({ dragging: true, index: pointIndex });\n  }\n\n  const stopDrag = () => setDragging({ dragging: false, index: 0 });\n\n  // Reads mouse position and updates vertex position\n  // if there's one being dragged\n  const handleDrag = (e) => {\n    if (!dragStatus.dragging || points.length < MAX_VERTICES) return;\n\n    // Spread to new array to avoid mutating\n    const newPoints = [...points];\n    const newCoords = { top: e.clientY, left: e.clientX };\n\n    // Replace point being dragged with new coordinates\n    newPoints.splice(dragStatus.index, 1, newCoords);\n    setPoints(newPoints);\n  }\n\n  const pArea = getParallelogramArea([...points, finalPoint]);\n  const cRadius = getCircleRadius(getParallelogramArea([...points, finalPoint]));\n  const cArea = (Math.pow(getCircleRadius(getParallelogramArea([...points, finalPoint])), 2) * Math.PI).toFixed(0);\n\n  return (\n    <>\n      <div className={css.App} onClick={handleClick} onMouseMove={handleDrag}>\n        <Canvas ref={parallelRef} />\n        <Canvas ref={circleRef} />\n\n        <div className={css.info}>\n          <p>Parallelogram area: {pArea}px²</p>\n          <p>Circle radius: {cRadius.toFixed(2)}px</p>\n          <p>Circle area: {cArea}px²</p>\n          <div className={css.buttonWrapper}>\n            <Button onClick={handleReset} message={\"Reset\"} />\n            <Button onClick={handleOpenModal} message={\"About\"} />\n          </div>\n        </div>\n\n        {points.map((point, index) =>\n          <Point\n            key={index}\n            top={point.top}\n            left={point.left}\n            onMouseDown={startDrag(index)}\n            onMouseUp={stopDrag}\n            draggable={points.length === MAX_VERTICES}\n          />\n        )}\n\n        {finalPoint.top && <Point top={finalPoint.top} left={finalPoint.left} final />}\n        {centerPoint.top && <Point top={centerPoint.top} left={centerPoint.left} center />}\n      </div>\n      <Modal open={modalOpen} closeModal={handleCloseModal} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}